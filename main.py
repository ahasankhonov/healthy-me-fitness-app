import streamlit as st
from ai import ask_ai, get_macros
from profiles import create_profile, get_notes, get_profile
from form_submit import update_personal_info, add_note, delete_note

st.title("Healthy Me")

st.set_page_config(
    page_title="Healthy Me",  # Browser tab title
)

def personal_data_form():
    with st.form("personal_data"):
        st.header("Personal Data")
        profile = st.session_state.profile

        name = st.text_input("Name", value=profile["general"]["name"])
        age = st.number_input(
            "Age", min_value=1, max_value=120, step=1, value=profile["general"]["age"]
        )
        weight = st.number_input(
            "Weight (kg)",
            min_value=0.0,
            max_value=300.0,
            step=0.1,
            value=float(profile["general"]["weight"]),
        )
        height = st.number_input(
            "Height (cm)",
            min_value=0.0,
            max_value=250.0,
            step=0.1,
            value=float(profile["general"]["height"]),
        )
        gender_options = ["Male", "Female", "Other"]
        gender = st.radio(
            "Gender", gender_options, index=gender_options.index(profile["general"].get("gender", "Male"))
        )
        activity_levels = ["Sedentary", "Lightly Active", "Moderately Active", "Very Active", "Super Active"]
        activity_level = st.selectbox(
            "Activity Level", activity_levels, index=activity_levels.index(profile["general"].get("activity_level", "Sedentary"))
        )

        if st.form_submit_button("Save"):
            st.session_state.profile = update_personal_info(
                profile,
                "general",
                name=name,
                age=age,
                weight=weight,
                height=height,
                gender=gender,
                activity_level=activity_level
            )
            st.success("Personal info updated.")


def goals_form():
    """Form to edit fitness goals."""
    profile = st.session_state.profile
    with st.form("goals_form"):
        st.header("Goals")
        goals = st.multiselect(
            "Select your Goals",
            ["Muscle Gain", "Fat Loss", "Stay Active"],
            default=profile.get("goals", ["Muscle Gain"])
        )
        if st.form_submit_button("Save"):
            st.session_state.profile = update_personal_info(profile, "goals", goals=goals)
            st.success("Goals updated.")


def macros_form():
    """Display macros and generate via AI."""
    profile = st.session_state.profile
    st.header("Macros")
    if st.button("Generate AI Macros"):
        with st.spinner("Calculating macros..."):
            macros = get_macros(profile.get("general"), profile.get("goals"), st.session_state.notes)
            profile["nutrition"] = macros
            st.session_state.profile = profile
            st.success("Macros generated by AI!")

    with st.form("nutrition_form"):
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            calories = st.number_input("Calories", min_value=0, value=profile["nutrition"].get("calories", 0))
        with col2:
            protein = st.number_input("Protein", min_value=0, value=profile["nutrition"].get("protein", 0))
        with col3:
            fat = st.number_input("Fat", min_value=0, value=profile["nutrition"].get("fat", 0))
        with col4:
            carbs = st.number_input("Carbs", min_value=0, value=profile["nutrition"].get("carbs", 0))

        if st.form_submit_button("Save Macros"):
            profile["nutrition"] = {"calories": calories, "protein": protein, "fat": fat, "carbs": carbs}
            st.session_state.profile = update_personal_info(profile, "nutrition", **profile["nutrition"])
            st.success("Nutrition saved.")


def notes_form():
    """Display and manage notes."""
    st.header("Notes")
    for i, note in enumerate(st.session_state.notes):
        cols = st.columns([5, 1])
        with cols[0]:
            st.text(note.get("text"))
        with cols[1]:
            if st.button("Delete", key=f"delete_{i}"):
                delete_note(note["_id"])
                st.session_state.notes.pop(i)
                st.experimental_rerun()

    new_note = st.text_input("Add a new note")
    if st.button("Add Note"):
        if new_note.strip():
            note = add_note(new_note, st.session_state.profile_id)
            st.session_state.notes.append(note)
            st.experimental_rerun()


def ask_ai_form():
    """Ask AI about your profile."""
    st.header("Ask AI")
    question = st.text_input("Your question")
    if st.button("Ask AI"):
        with st.spinner("AI is thinking..."):
            answer = ask_ai(st.session_state.profile, question, st.session_state.notes)
            st.write(answer)


def run_app():
    """Initialize session state and run all forms."""
    if "profile" not in st.session_state:
        profile_id = 1
        profile = get_profile(profile_id)
        if not profile:
            profile_id, profile = create_profile(profile_id)
        st.session_state.profile_id = profile_id
        st.session_state.profile = profile

    if "notes" not in st.session_state:
        st.session_state.notes = get_notes(st.session_state.profile_id)

    personal_data_form()
    goals_form()
    macros_form()
    notes_form()
    ask_ai_form()


if __name__ == "__main__":
    st.title("Personal Fitness Tool")
    run_app()
